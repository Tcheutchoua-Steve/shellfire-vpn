package de.shellfire.vpn.gui.controller;

import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;

import javafx.scene.control.TextField;

import java.net.URL;
import java.util.ResourceBundle;

import org.slf4j.Logger;
import org.xnap.commons.i18n.I18n;

import de.shellfire.vpn.Util;
import de.shellfire.vpn.gui.LoginForms;
import de.shellfire.vpn.gui.RegisterForm;
import de.shellfire.vpn.gui.controller.ShellfireVPNMainFormFxmlController;
import de.shellfire.vpn.i18n.VpnI18N;
import de.shellfire.vpn.webservice.Response;
import de.shellfire.vpn.webservice.WebService;
import de.shellfire.vpn.webservice.model.LoginResponse;
import javafx.concurrent.Task;
import javafx.event.ActionEvent;

import javafx.scene.control.Label;

import javafx.scene.image.ImageView;
import javafx.scene.input.ContextMenuEvent;
import javafx.scene.control.PasswordField;

import javafx.scene.control.CheckBox;
import javafx.scene.input.InputMethodEvent;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.layout.Pane;
import javafx.scene.text.Font;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.scene.Cursor;
import javafx.scene.effect.BlendMode;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;

public class LoginController extends AnchorPane implements Initializable {

    @FXML
    private Button fButtonLogin;
    @FXML
    private Button fButtonLostUserCredential;
    @FXML
    private Label label;
    @FXML
    private Label fLabelUsername;
    @FXML
    private Label fLabelPassword;
    @FXML
    private TextField fUsername;
    @FXML
    private CheckBox fStoreLoginData;
    @FXML
    private CheckBox fAutoLogin;
    @FXML
    private CheckBox fAutoStart;
    @FXML
    private CheckBox fAutoconnect;
    @FXML
    private Button fButtonOpenRegistrationForm;
    @FXML
    private PasswordField fPassword;
    @FXML
    private Pane headerPanel;
    @FXML
    private ImageView headerImageView;
    @FXML
    private Pane exitLogoPane;
    @FXML
    private ImageView exitImageView;

    WebService service;
    private boolean minimize;
    private LoginForms application;
    private static I18n i18n = VpnI18N.getI18n();
    private static Logger log = Util.getLogger(LoginForms.class.getCanonicalName());
    private String username;
    private String password;
    private static boolean passwordBogus;

    public LoginController() {
    }

    // Event Listener on Button[#fButtonLogin].onAction
    @FXML
    public void handlefButtonLogin(ActionEvent event) {
        //fButtonLogin.setDisable(true);
        if (validate()) {
            try {
                ProgressDialogController pgressDialog = (ProgressDialogController) application
                        .replaceSceneContent("ProgressDiagogV.fxml");
                pgressDialog.setDialogText(i18n.tr("Einloggen..."));
                this.application.getStage();

            } catch (Exception ex) {
                log.debug("could not load progressDialog fxml in login window \n" + ex.getMessage());
            }
        } else {
            fUsername.requestFocus();
        }

    }

    // Event Listener on Button[#fButtonLostUserCredential].onAction
    @FXML
    public void handlefButtonLostUserCredential(ActionEvent event) {
        Util.openUrl(service.getUrlPasswordLost());
    }

    // Event Listener on CheckBox[#fStoreLoginData].onAction
    @FXML
    public void handlefStoreLoginData(ActionEvent event) {
        // TODO Autogenerated
    }

    // Event Listener on CheckBox[#fAutoLogin].onAction
    @FXML
    public void handlefAutoLogin(ActionEvent event) {
        if (this.fAutoLogin.isSelected()) {
            this.fStoreLoginData.setSelected(true);
        }
    }

    // Event Listener on CheckBox[#fAutoStart].onAction
    @FXML
    public void handlefAutoStart(ActionEvent event) {
        // empty
    }

    // Event Listener on CheckBox[#fAutoconnect].onAction
    @FXML
    public void handlefAutoconnect(ActionEvent event) {
        // empty
    }

    // Event Listener on Button[#fButtonOpenRegistrationForm].onAction
    @FXML
    public void handlefButtonOpenRegistrationForm(ActionEvent event) {

        this.application.getRegisterFormController();
        this.application.getStage().show();
        //fButtonOpenRegistrationForm.setVisible(false);
        // TODO Autogenerated
        //RegisterForm regForm = new RegisterForm();
    }

    /*   fPassword.focusedProperty().addListener(new ChangeListener<Boolean>()
{
    @Override
    public void changed(ObservableValue<? extends Boolean> arg0, Boolean oldPropertyValue, Boolean newPropertyValue)
    {
        if (newPropertyValue)
        {
            System.out.println("Textfield on focus");
        }
        else
        {
            System.out.println("Textfield out focus");
        }
    }
});*/
    // Event Listener on ImageView[#exitImageView].onContextMenuRequested
    @FXML
    private void handleEXitButtonClicked(MouseEvent event) {
        Platform.exit();
    }

    @Override
    public void initialize(URL arg0, ResourceBundle arg1) {
        initComponents();
        this.service = WebService.getInstance();
        fButtonLostUserCredential.setOnAction((ActionEvent event) -> {
            Util.openUrl(service.getUrlPasswordLost());
        });
    }

    public void initComponents() {
        this.fLabelUsername.setText(i18n.tr("Email / Benutzername:"));
        this.fLabelUsername.setFont(Font.font("Arial", Util.getFontSize()));

        this.fLabelPassword.setText(i18n.tr("Passwort:"));
        this.fLabelPassword.setFont(Font.font("Arial", Util.getFontSize()));

        this.fAutoLogin.setText(i18n.tr("Automatisch einloggen"));

        this.fButtonOpenRegistrationForm.setText(i18n.tr("Keine Zugangsdaten?"));

        this.fButtonLostUserCredential.setText(i18n.tr("Zugangsdaten verloren?"));

        this.fButtonLogin.setText(i18n.tr("Login"));

        this.fAutoStart.setText(i18n.tr("Beim Hochfahren starten"));

        this.fAutoconnect.setText(i18n.tr("Automatisch verbinden"));

        this.fStoreLoginData.setText(i18n.tr("Logindaten speichern"));

        this.headerImageView.setImage(ShellfireVPNMainFormFxmlController.getLogo());

        this.headerPanel.setStyle("-fx-background-color: rgb(18,172,229);");

        this.exitImageView.setImage(Util.getImageIconFX("src/main/resources/icons/exit.png"));

        // Listeners for changes in password field
        fPassword.focusedProperty().addListener(new ChangeListener<Boolean>() {
            @Override
            public void changed(ObservableValue<? extends Boolean> arg0, Boolean oldPropertyValue, Boolean newPropertyValue) {
                // password field in focus
                if (newPropertyValue) {
                    if (passwordBogus) {
                        fPassword.setText("");
                    }
                } else {
                    // password field out of focus
                    password = fPassword.getText();
                    passwordBogus = false;
                }
            }
        });
    }

    public void setApp(LoginForms applic) {
        this.application = applic;
    }

    public boolean isMinimize() {
        return minimize;
    }

    public void setMinimize(boolean minimize) {
        this.minimize = minimize;
    }

    public void showLoginProgress() {
        // TODO implement loginprogrss
    }

    @FXML
    private void handleUsernameChanged(InputMethodEvent event) {
        this.username = fUsername.getText();
    }

    @FXML
    private void handleUsernameContextRequested(ContextMenuEvent event) {
    }

    @FXML
    private void handlePasswordFieldChanged(InputMethodEvent event) {
        //this.
    }

    @FXML
    private void handlePasswordFieldPressed(KeyEvent event) {
        if (event.getCode().equals(KeyCode.ENTER)) {
            this.password = fPassword.getText();
            this.passwordBogus = false;
            // perform login action when inputs are correct
            handlefButtonLogin(null);
        }
    }

    @FXML
    private void handleExitImageMouseExited(MouseEvent event) {
        //this.exitImageView.setBlendMode(BlendMode.LIGHTEN);
        this.application.getStage().getScene().setCursor(Cursor.DEFAULT);
    }

    @FXML
    private void handleExitImageMouseEntered(MouseEvent event) {
        //this.exitImageView.setBlendMode(BlendMode.OVERLAY);
        this.application.getStage().getScene().setCursor(Cursor.HAND);
    }

    class LoginTAsk extends Task<Response<LoginResponse>> {

        public void done() {
            Response<LoginResponse> loginResult = null;
            try {
                loginResult = get();
            } catch (Exception ignore) {
                ignore.printStackTrace();
            }
            hideLoginProgress();
            String user = getUser();
            String password = getPassword();
        }

        @Override
        protected Response<LoginResponse> call() throws Exception {
            // TODO Auto-generated method stub
            return null;
        }

    }

    public void hideLoginProgress() {
        this.setDisable(true);
    }

    public String getUser() {
        return this.fUsername.getText();
    }

    public String getPassword() {
        return this.fPassword.getText();
    }

    public boolean validate() {

        if ((fUsername.getText().trim().length() > 0) && (fPassword.getText().trim().length() > 0)) {
            //fUsername.requestFocus();
        }
        return false;
    }
}
